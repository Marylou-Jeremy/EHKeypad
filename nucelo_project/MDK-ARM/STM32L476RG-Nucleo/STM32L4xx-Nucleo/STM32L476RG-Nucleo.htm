<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32L4xx-Nucleo\STM32L476RG-Nucleo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32L4xx-Nucleo\STM32L476RG-Nucleo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Nov 10 22:56:23 2017
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ST25DV_i2c_CreateUserZone &rArr; ST25DV_i2c_InitEndZone &rArr; ST25DV_i2c_WriteEndZonex &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[86]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[86]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[69]">ADC1_2_IRQHandler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[86]">ADC3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[51]">BusFault_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6b]">CAN1_RX0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6c]">CAN1_RX1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6d]">CAN1_SCE_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6a]">CAN1_TX_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[97]">COMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[94]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[95]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[96]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[81]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[62]">DMA1_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[63]">DMA1_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[64]">DMA1_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[65]">DMA1_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[66]">DMA1_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[67]">DMA1_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[68]">DMA1_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8f]">DMA2_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[90]">DMA2_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[91]">DMA2_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[92]">DMA2_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[93]">DMA2_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9b]">DMA2_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9c]">DMA2_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[54]">DebugMon_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5d]">EXTI0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7f]">EXTI15_10_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5e]">EXTI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5f]">EXTI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[60]">EXTI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[61]">EXTI4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6e]">EXTI9_5_IRQHandler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5b]">FLASH_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[87]">FMC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a7]">FPU_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4f]">HardFault_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[77]">I2C1_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[76]">I2C1_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[79]">I2C2_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[78]">I2C2_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a0]">I2C3_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9f]">I2C3_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[ac]">I2C_DMAAbort</a> from stm32l4xx_hal_i2c.o(.text) referenced from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[b1]">I2C_DMAError</a> from stm32l4xx_hal_i2c.o(.text) referenced 3 times from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[b2]">I2C_DMAMasterReceiveCplt</a> from stm32l4xx_hal_i2c.o(.text) referenced 2 times from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[b0]">I2C_DMAMasterTransmitCplt</a> from stm32l4xx_hal_i2c.o(.text) referenced 2 times from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[b4]">I2C_DMASlaveReceiveCplt</a> from stm32l4xx_hal_i2c.o(.text) referenced from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[b3]">I2C_DMASlaveTransmitCplt</a> from stm32l4xx_hal_i2c.o(.text) referenced from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[ad]">I2C_Master_ISR_DMA</a> from stm32l4xx_hal_i2c.o(.text) referenced 3 times from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[af]">I2C_Master_ISR_IT</a> from stm32l4xx_hal_i2c.o(.text) referenced 5 times from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[ae]">I2C_Slave_ISR_DMA</a> from stm32l4xx_hal_i2c.o(.text) referenced 2 times from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[ab]">I2C_Slave_ISR_IT</a> from stm32l4xx_hal_i2c.o(.text) referenced 3 times from stm32l4xx_hal_i2c.o(.text)
 <LI><a href="#[a5]">LCD_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[98]">LPTIM1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[99]">LPTIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9d]">LPUART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[50]">MemManage_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4e]">NMI_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9a]">OTG_FS_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[58]">PVD_PVM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[55]">PendSV_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9e]">QUADSPI_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5c]">RCC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a6]">RNG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[80]">RTC_Alarm_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5a]">RTC_WKUP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4d]">Reset_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a1]">SAI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a2]">SAI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[88]">SDMMC1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7a]">SPI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7b]">SPI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8a]">SPI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4]">ST25DV_i2c_ConfigureGPO</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[1f]">ST25DV_i2c_CreateUserZone</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[3a]">ST25DV_i2c_GetEHENMode_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[3d]">ST25DV_i2c_GetEHON_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[3]">ST25DV_i2c_GetGPOStatus</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[36]">ST25DV_i2c_GetGPO_en_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[49]">ST25DV_i2c_GetMBEN_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[25]">ST25DV_i2c_GetRFDisable</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[42]">ST25DV_i2c_GetRFDisable_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[3e]">ST25DV_i2c_GetRFField_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[28]">ST25DV_i2c_GetRFSleep</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[45]">ST25DV_i2c_GetRFSleep_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[3f]">ST25DV_i2c_GetVCC_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[0]">ST25DV_i2c_Init</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[1e]">ST25DV_i2c_InitEndZone</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[2]">ST25DV_i2c_IsDeviceReady</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[18]">ST25DV_i2c_PresentI2CPassword</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[10]">ST25DV_i2c_ReadAFI</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[11]">ST25DV_i2c_ReadAfiRFProtection</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[e]">ST25DV_i2c_ReadDSFID</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[5]">ST25DV_i2c_ReadData</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[c]">ST25DV_i2c_ReadDataCurrentAddr</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[f]">ST25DV_i2c_ReadDsfidRFProtection</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[39]">ST25DV_i2c_ReadEHCtrl_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[21]">ST25DV_i2c_ReadEHMode</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[1c]">ST25DV_i2c_ReadEndZonex</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[35]">ST25DV_i2c_ReadGPO_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[12]">ST25DV_i2c_ReadI2CProtectZone</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[33]">ST25DV_i2c_ReadI2CSecuritySession_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[9]">ST25DV_i2c_ReadICRev</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[1]">ST25DV_i2c_ReadID</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[b]">ST25DV_i2c_ReadITPulse</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[34]">ST25DV_i2c_ReadITSTStatus_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[14]">ST25DV_i2c_ReadLockCCFile</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[16]">ST25DV_i2c_ReadLockCFG</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[48]">ST25DV_i2c_ReadMBCtrl_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[4c]">ST25DV_i2c_ReadMBLength_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[2b]">ST25DV_i2c_ReadMBMode</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[2d]">ST25DV_i2c_ReadMBWDG</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[2f]">ST25DV_i2c_ReadMailboxData</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[31]">ST25DV_i2c_ReadMailboxRegister</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[20]">ST25DV_i2c_ReadMemSize</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[23]">ST25DV_i2c_ReadRFMngt</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[40]">ST25DV_i2c_ReadRFMngt_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[1a]">ST25DV_i2c_ReadRFZxSS</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[7]">ST25DV_i2c_ReadRegister</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[d]">ST25DV_i2c_ReadUID</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[3c]">ST25DV_i2c_ResetEHENMode_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[38]">ST25DV_i2c_ResetGPO_en_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[4b]">ST25DV_i2c_ResetMBEN_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[27]">ST25DV_i2c_ResetRFDisable</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[44]">ST25DV_i2c_ResetRFDisable_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[2a]">ST25DV_i2c_ResetRFSleep</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[47]">ST25DV_i2c_ResetRFSleep_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[3b]">ST25DV_i2c_SetEHENMode_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[37]">ST25DV_i2c_SetGPO_en_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[4a]">ST25DV_i2c_SetMBEN_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[26]">ST25DV_i2c_SetRFDisable</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[43]">ST25DV_i2c_SetRFDisable_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[29]">ST25DV_i2c_SetRFSleep</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[46]">ST25DV_i2c_SetRFSleep_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[6]">ST25DV_i2c_WriteData</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[22]">ST25DV_i2c_WriteEHMode</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[1d]">ST25DV_i2c_WriteEndZonex</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[19]">ST25DV_i2c_WriteI2CPassword</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[13]">ST25DV_i2c_WriteI2CProtectZonex</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[a]">ST25DV_i2c_WriteITPulse</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[15]">ST25DV_i2c_WriteLockCCFile</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[17]">ST25DV_i2c_WriteLockCFG</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[2c]">ST25DV_i2c_WriteMBMode</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[2e]">ST25DV_i2c_WriteMBWDG</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[30]">ST25DV_i2c_WriteMailboxData</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[32]">ST25DV_i2c_WriteMailboxRegister</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[24]">ST25DV_i2c_WriteRFMngt</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[41]">ST25DV_i2c_WriteRFMngt_Dyn</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[1b]">ST25DV_i2c_WriteRFZxSS</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[8]">ST25DV_i2c_WriteRegister</a> from st25dv.o(.text) referenced 2 times from st25dv.o(.data)
 <LI><a href="#[53]">SVC_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a3]">SWPMI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[56]">SysTick_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a9]">SystemInit</a> from system_stm32l4xx.o(.text) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[59]">TAMP_STAMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6f]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[72]">TIM1_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[71]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[70]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[73]">TIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[74]">TIM3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[75]">TIM4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[89]">TIM5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8d]">TIM6_DAC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8e]">TIM7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[82]">TIM8_BRK_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[85]">TIM8_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[84]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[83]">TIM8_UP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a4]">TSC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8b]">UART4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8c]">UART5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7c]">USART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7d]">USART2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7e]">USART3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[52]">UsageFault_Handler</a> from stm32l4xx_it.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[57]">WWDG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[aa]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[a8]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[aa]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[171]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b5]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[170]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[172]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[173]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[174]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[175]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[176]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>ErrorHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ErrorHandler &rArr; NFC04A1_LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGrpRegularOverrunError_Callback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConversionStartPoll_ADC_GrpRegular
</UL>

<P><STRONG><a name="[b9]"></a>ConversionStartPoll_ADC_GrpRegular</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConversionStartPoll_ADC_GrpRegular &rArr; ErrorHandler &rArr; NFC04A1_LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>Activate_ADC</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Activate_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>Configure_ADC</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Configure_ADC &rArr; LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>GPIO_init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>main</STRONG> (Thumb, 754 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main &rArr; HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_ON
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_OFF
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_GPO_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NFCTAG_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NFCTAG_GetExtended_Drv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NFCTAG_ConfigIT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_ADC
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_ADC
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConversionStartPoll_ADC_GrpRegular
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cc]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NFCTAG_GetExtended_Drv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>AdcGrpRegularOverrunError_Callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdcGrpRegularOverrunError_Callback &rArr; ErrorHandler &rArr; NFC04A1_LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[d0]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ce]"></a>SystemClock_Config</STRONG> (Thumb, 162 bytes, Stack size 232 bytes, stm32l4xx_hal_msp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[4e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_2_IRQHandler &rArr; AdcGrpRegularOverrunError_Callback &rArr; ErrorHandler &rArr; NFC04A1_LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcGrpRegularOverrunError_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[177]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, system_stm32l4xx.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>ST25DV_i2c_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ST25DV_i2c_Init &rArr; ST25DV_IO_Init &rArr; NFCTAG_IO_Init &rArr; STM32_I2C1_Init &rArr; STM32_I2C1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ST25DV_i2c_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMBWDG
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMBMode
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetRFSleep
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetRFSleep
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetRFDisable
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetRFDisable
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRFMngt
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadEHMode
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMemSize
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadEndZonex
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRFZxSS
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadLockCFG
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadLockCCFile
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteI2CProtectZonex
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadI2CProtectZone
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadAfiRFProtection
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadAFI
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadDsfidRFProtection
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadDSFID
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadUID
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadITPulse
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetGPOStatus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadICRev
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>ST25DV_i2c_ReadID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ST25DV_i2c_ReadID &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ST25DV_i2c_ReadICRev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ST25DV_i2c_ReadICRev &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>ST25DV_i2c_IsDeviceReady</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ST25DV_i2c_IsDeviceReady &rArr; ST25DV_IO_IsDeviceReady &rArr; NFCTAG_IO_IsDeviceReady &rArr; STM32_I2C1_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_IsDeviceReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ST25DV_i2c_GetGPOStatus</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetGPOStatus &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ST25DV_i2c_WriteRegister</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMBWDG
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMBMode
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetRFSleep
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetRFSleep
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetRFDisable
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetRFDisable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRFMngt
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteEHMode
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteEndZonex
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRFZxSS
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteI2CPassword
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_PresentI2CPassword
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteLockCFG
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteLockCCFile
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteI2CProtectZonex
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteITPulse
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ConfigureGPO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ST25DV_i2c_ConfigureGPO</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ST25DV_i2c_ConfigureGPO &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ST25DV_i2c_ReadITPulse</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadITPulse &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ST25DV_i2c_WriteITPulse</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_WriteITPulse &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ST25DV_i2c_ReadData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ST25DV_i2c_ReadData &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ST25DV_i2c_WriteData</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_WriteData &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ST25DV_i2c_ReadDataCurrentAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ST25DV_i2c_ReadDataCurrentAddr &rArr; ST25DV_IO_Read &rArr; NFCTAG_IO_Read &rArr; STM32_I2C1_Read &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>ST25DV_i2c_ReadUID</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ST25DV_i2c_ReadUID &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>ST25DV_i2c_ReadDSFID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ST25DV_i2c_ReadDSFID &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>ST25DV_i2c_ReadDsfidRFProtection</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadDsfidRFProtection &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>ST25DV_i2c_ReadAFI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ST25DV_i2c_ReadAFI &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ST25DV_i2c_ReadAfiRFProtection</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadAfiRFProtection &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>ST25DV_i2c_ReadI2CProtectZone</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadI2CProtectZone &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>ST25DV_i2c_WriteI2CProtectZonex</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ST25DV_i2c_WriteI2CProtectZonex &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ST25DV_i2c_ReadLockCCFile</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadLockCCFile &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>ST25DV_i2c_WriteLockCCFile</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_WriteLockCCFile &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>ST25DV_i2c_ReadLockCFG</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadLockCFG &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>ST25DV_i2c_WriteLockCFG</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_WriteLockCFG &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>ST25DV_i2c_PresentI2CPassword</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ST25DV_i2c_PresentI2CPassword &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>ST25DV_i2c_WriteI2CPassword</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ST25DV_i2c_WriteI2CPassword &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>ST25DV_i2c_ReadRFZxSS</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ST25DV_i2c_ReadRFZxSS &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>ST25DV_i2c_WriteRFZxSS</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ST25DV_i2c_WriteRFZxSS &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>ST25DV_i2c_ReadEndZonex</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadEndZonex &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>ST25DV_i2c_WriteEndZonex</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ST25DV_i2c_WriteEndZonex &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_CreateUserZone
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_InitEndZone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>ST25DV_i2c_ReadMemSize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadMemSize &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_CreateUserZone
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_InitEndZone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>ST25DV_i2c_InitEndZone</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ST25DV_i2c_InitEndZone &rArr; ST25DV_i2c_WriteEndZonex &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMemSize
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteEndZonex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_CreateUserZone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>ST25DV_i2c_CreateUserZone</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ST25DV_i2c_CreateUserZone &rArr; ST25DV_i2c_InitEndZone &rArr; ST25DV_i2c_WriteEndZonex &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_InitEndZone
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMemSize
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteEndZonex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>ST25DV_i2c_ReadEHMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadEHMode &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>ST25DV_i2c_WriteEHMode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_WriteEHMode &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>ST25DV_i2c_ReadRFMngt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadRFMngt &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>ST25DV_i2c_WriteRFMngt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ST25DV_i2c_WriteRFMngt &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>ST25DV_i2c_ReadMailboxRegister</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMBLength_Dyn
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetMBEN_Dyn
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMBCtrl_Dyn
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetRFSleep_Dyn
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetRFSleep_Dyn
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetRFSleep_Dyn
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetRFDisable_Dyn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetRFDisable_Dyn
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetRFDisable_Dyn
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRFMngt_Dyn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetVCC_Dyn
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetRFField_Dyn
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetEHON_Dyn
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetEHENMode_Dyn
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetEHENMode_Dyn
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetEHENMode_Dyn
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadEHCtrl_Dyn
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetGPO_en_Dyn
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetGPO_en_Dyn
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetGPO_en_Dyn
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadGPO_Dyn
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadITSTStatus_Dyn
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadI2CSecuritySession_Dyn
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetRFSleep
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_GetRFDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>ST25DV_i2c_GetRFDisable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetRFDisable &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>ST25DV_i2c_SetRFDisable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_SetRFDisable &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>ST25DV_i2c_ResetRFDisable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_ResetRFDisable &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>ST25DV_i2c_GetRFSleep</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetRFSleep &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>ST25DV_i2c_SetRFSleep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_SetRFSleep &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>ST25DV_i2c_ResetRFSleep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_ResetRFSleep &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>ST25DV_i2c_ReadMBMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadMBMode &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>ST25DV_i2c_WriteMBMode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_WriteMBMode &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>ST25DV_i2c_ReadMBWDG</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadMBWDG &rArr; ST25DV_i2c_ReadRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>ST25DV_i2c_WriteMBWDG</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ST25DV_i2c_WriteMBWDG &rArr; ST25DV_i2c_WriteRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>ST25DV_i2c_ReadMailboxData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ST25DV_i2c_ReadMailboxData &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>ST25DV_i2c_WriteMailboxData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ST25DV_i2c_WriteMailboxData &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>ST25DV_i2c_WriteMailboxRegister</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetMBEN_Dyn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetMBEN_Dyn
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetRFSleep_Dyn
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetRFSleep_Dyn
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetRFDisable_Dyn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetRFDisable_Dyn
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRFMngt_Dyn
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetEHENMode_Dyn
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetEHENMode_Dyn
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ResetGPO_en_Dyn
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_SetGPO_en_Dyn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>ST25DV_i2c_ReadI2CSecuritySession_Dyn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadI2CSecuritySession_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>ST25DV_i2c_ReadITSTStatus_Dyn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ST25DV_i2c_ReadITSTStatus_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>ST25DV_i2c_ReadGPO_Dyn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ST25DV_i2c_ReadGPO_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>ST25DV_i2c_GetGPO_en_Dyn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetGPO_en_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>ST25DV_i2c_SetGPO_en_Dyn</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_SetGPO_en_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>ST25DV_i2c_ResetGPO_en_Dyn</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_ResetGPO_en_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>ST25DV_i2c_ReadEHCtrl_Dyn</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadEHCtrl_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>ST25DV_i2c_GetEHENMode_Dyn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetEHENMode_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>ST25DV_i2c_SetEHENMode_Dyn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_SetEHENMode_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>ST25DV_i2c_ResetEHENMode_Dyn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_ResetEHENMode_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>ST25DV_i2c_GetEHON_Dyn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetEHON_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>ST25DV_i2c_GetRFField_Dyn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetRFField_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>ST25DV_i2c_GetVCC_Dyn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetVCC_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>ST25DV_i2c_ReadRFMngt_Dyn</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadRFMngt_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>ST25DV_i2c_WriteRFMngt_Dyn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ST25DV_i2c_WriteRFMngt_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>ST25DV_i2c_GetRFDisable_Dyn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetRFDisable_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>ST25DV_i2c_SetRFDisable_Dyn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_SetRFDisable_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>ST25DV_i2c_ResetRFDisable_Dyn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_ResetRFDisable_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>ST25DV_i2c_GetRFSleep_Dyn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetRFSleep_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>ST25DV_i2c_SetRFSleep_Dyn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_SetRFSleep_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>ST25DV_i2c_ResetRFSleep_Dyn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ST25DV_i2c_ResetRFSleep_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>ST25DV_i2c_ReadMBCtrl_Dyn</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_ReadMBCtrl_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>ST25DV_i2c_GetMBEN_Dyn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST25DV_i2c_GetMBEN_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>ST25DV_i2c_SetMBEN_Dyn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ST25DV_i2c_SetMBEN_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>ST25DV_i2c_ResetMBEN_Dyn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ST25DV_i2c_ResetMBEN_Dyn &rArr; ST25DV_i2c_WriteMailboxRegister &rArr; ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>ST25DV_i2c_ReadMBLength_Dyn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st25dv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ST25DV_i2c_ReadMBLength_Dyn &rArr; ST25DV_i2c_ReadMailboxRegister &rArr; ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st25dv.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>NFC04A1_LED_Init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NFC04A1_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>NFC04A1_LED_DeInit</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>

<P><STRONG><a name="[b8]"></a>NFC04A1_LED_ON</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NFC04A1_LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorHandler
</UL>

<P><STRONG><a name="[ca]"></a>NFC04A1_LED_OFF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NFC04A1_LED_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>NFC04A1_LED_Toggle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>

<P><STRONG><a name="[c4]"></a>NFC04A1_GPO_Init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NFC04A1_GPO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>NFC04A1_GPO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>

<P><STRONG><a name="[e5]"></a>NFC04A1_GPO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>

<P><STRONG><a name="[e6]"></a>NFC04A1_LPD_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NFC04A1_LPD_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_Init
</UL>

<P><STRONG><a name="[e7]"></a>NFC04A1_LPD_DeInit</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>

<P><STRONG><a name="[e8]"></a>NFC04A1_LPD_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>

<P><STRONG><a name="[e9]"></a>NFC04A1_LPD_WritePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>

<P><STRONG><a name="[f2]"></a>NFC04A1_SelectI2cSpeed</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_Init
</UL>

<P><STRONG><a name="[f4]"></a>NFCTAG_ConvertStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_MemRead
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_MemWrite
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_IsDeviceReady
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_Init
</UL>

<P><STRONG><a name="[d9]"></a>ST25DV_IO_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ST25DV_IO_Init &rArr; NFCTAG_IO_Init &rArr; STM32_I2C1_Init &rArr; STM32_I2C1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_Init
</UL>

<P><STRONG><a name="[f5]"></a>NFCTAG_IO_IsNacked</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NFCTAG_IO_IsNacked
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_IsNacked
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_IsNacked
</UL>

<P><STRONG><a name="[f7]"></a>ST25DV_IO_IsNacked</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST25DV_IO_IsNacked &rArr; NFCTAG_IO_IsNacked
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_IsNacked
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemWrite
</UL>

<P><STRONG><a name="[fa]"></a>NFCTAG_IO_IsDeviceReady</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NFCTAG_IO_IsDeviceReady &rArr; STM32_I2C1_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_ConvertStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_IsDeviceReady
</UL>

<P><STRONG><a name="[db]"></a>ST25DV_IO_IsDeviceReady</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ST25DV_IO_IsDeviceReady &rArr; NFCTAG_IO_IsDeviceReady &rArr; STM32_I2C1_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemWrite
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_IsDeviceReady
</UL>

<P><STRONG><a name="[fd]"></a>NFCTAG_IO_MemWrite</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_ConvertStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_MemWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemWrite
</UL>

<P><STRONG><a name="[dc]"></a>ST25DV_IO_MemWrite</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ST25DV_IO_MemWrite &rArr; NFCTAG_IO_MemWrite &rArr; STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_MemWrite
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_IsNacked
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxRegister
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteMailboxData
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteData
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteRegister
</UL>

<P><STRONG><a name="[101]"></a>NFCTAG_IO_MemRead</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_ConvertStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_MemRead
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemRead
</UL>

<P><STRONG><a name="[da]"></a>ST25DV_IO_MemRead</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ST25DV_IO_MemRead &rArr; NFCTAG_IO_MemRead &rArr; STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_MemRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxData
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadMailboxRegister
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadData
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadRegister
</UL>

<P><STRONG><a name="[104]"></a>NFCTAG_IO_Read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NFCTAG_IO_Read &rArr; STM32_I2C1_Read &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_ConvertStatus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_Read
</UL>

<P><STRONG><a name="[dd]"></a>ST25DV_IO_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ST25DV_IO_Read &rArr; NFCTAG_IO_Read &rArr; STM32_I2C1_Read &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_ReadDataCurrentAddr
</UL>

<P><STRONG><a name="[c5]"></a>BSP_NFCTAG_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, x_nucleo_nfc04a1_nfctag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_NFCTAG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>BSP_NFCTAG_DeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>BSP_NFCTAG_isInitialized</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>BSP_NFCTAG_ReadID</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>BSP_NFCTAG_GetByteSize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>BSP_NFCTAG_IsDeviceReady</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NFCTAG_WriteRegister
</UL>

<P><STRONG><a name="[c7]"></a>BSP_NFCTAG_ConfigIT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_nfc04a1_nfctag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_NFCTAG_ConfigIT
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>BSP_NFCTAG_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>BSP_NFCTAG_ReadData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>BSP_NFCTAG_WriteData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>BSP_NFCTAG_ReadRegister</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>BSP_NFCTAG_WriteRegister</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, x_nucleo_nfc04a1_nfctag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NFCTAG_IsDeviceReady
</UL>

<P><STRONG><a name="[c6]"></a>BSP_NFCTAG_GetExtended_Drv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, x_nucleo_nfc04a1_nfctag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>HAL_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[d7]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_EnableVREFBUF
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_MemWrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_DisablePLLSAI2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnablePLLSAI2
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_DisablePLLSAI1
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnablePLLSAI1
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_IT
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_IT
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[c3]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>HAL_ResumeTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>HAL_GetUIDw0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>HAL_GetUIDw1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>HAL_GetUIDw2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>HAL_SYSCFG_SRAM2Erase</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>HAL_SYSCFG_EnableMemorySwappingBank</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>HAL_SYSCFG_DisableMemorySwappingBank</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>HAL_SYSCFG_VREFBUF_VoltageScalingConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>HAL_SYSCFG_VREFBUF_HighImpedanceConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>HAL_SYSCFG_VREFBUF_TrimmingConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>HAL_SYSCFG_EnableVREFBUF</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[194]"></a>HAL_SYSCFG_DisableVREFBUF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>HAL_SYSCFG_EnableIOAnalogSwitchBooster</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>HAL_SYSCFG_DisableIOAnalogSwitchBooster</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32l4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10f]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>

<P><STRONG><a name="[199]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 138 bytes, Stack size 28 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[111]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[19e]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>HAL_DMA_Init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>HAL_DMA_Start</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[114]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32l4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_DMA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit_DMA
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_DMA
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_DMA
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_DMA_Abort</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[115]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>HAL_DMA_RegisterCallback</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>HAL_DMA_UnRegisterCallback</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>HAL_DMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 484 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LPD_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_MspInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_GPO_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableLSCO
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
</UL>

<P><STRONG><a name="[e1]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, stm32l4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LPD_DeInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_GPO_DeInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_DeInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_MspDeInit
</UL>

<P><STRONG><a name="[cb]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LPD_ReadPin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_GPO_ReadPin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LPD_WritePin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LPD_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_ON
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_OFF
</UL>

<P><STRONG><a name="[e3]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LED_Toggle
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_I2C_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_Init
</UL>

<P><STRONG><a name="[117]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[f1]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_DeInit
</UL>

<P><STRONG><a name="[11d]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[103]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_Read
</UL>

<P><STRONG><a name="[120]"></a>HAL_I2C_Slave_Transmit</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[121]"></a>HAL_I2C_Slave_Receive</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[128]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
</UL>

<P><STRONG><a name="[129]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
</UL>

<P><STRONG><a name="[124]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
</UL>

<P><STRONG><a name="[126]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[125]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[12b]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[133]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[132]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[131]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[130]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[136]"></a>HAL_I2C_Master_Transmit_IT</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[137]"></a>HAL_I2C_Master_Receive_IT</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[138]"></a>HAL_I2C_Slave_Transmit_IT</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>

<P><STRONG><a name="[139]"></a>HAL_I2C_Slave_Receive_IT</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>

<P><STRONG><a name="[13a]"></a>HAL_I2C_Master_Transmit_DMA</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[13b]"></a>HAL_I2C_Master_Receive_DMA</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[13c]"></a>HAL_I2C_Slave_Transmit_DMA</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>

<P><STRONG><a name="[13d]"></a>HAL_I2C_Slave_Receive_DMA</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>

<P><STRONG><a name="[fc]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_MemWrite
</UL>

<P><STRONG><a name="[100]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_MemRead
</UL>

<P><STRONG><a name="[140]"></a>HAL_I2C_Mem_Write_IT</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[141]"></a>HAL_I2C_Mem_Read_IT</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[142]"></a>HAL_I2C_Mem_Write_DMA</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[143]"></a>HAL_I2C_Mem_Read_DMA</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[f9]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_IsDeviceReady
</UL>

<P><STRONG><a name="[144]"></a>HAL_I2C_Master_Sequential_Transmit_IT</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[145]"></a>HAL_I2C_Master_Sequential_Receive_IT</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[146]"></a>HAL_I2C_Slave_Sequential_Transmit_IT</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>

<P><STRONG><a name="[147]"></a>HAL_I2C_Slave_Sequential_Receive_IT</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>

<P><STRONG><a name="[148]"></a>HAL_I2C_EnableListen_IT</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>

<P><STRONG><a name="[149]"></a>HAL_I2C_DisableListen_IT</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>

<P><STRONG><a name="[14a]"></a>HAL_I2C_Master_Abort_IT</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[ec]"></a>HAL_I2C_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_SelectI2cSpeed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_Init
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_I2C_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>HAL_I2C_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>HAL_I2CEx_EnableWakeUp</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>HAL_I2CEx_DisableWakeUp</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>HAL_I2CEx_EnableFastModePlus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c_ex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_EnableFastModePlus
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_Init
</UL>

<P><STRONG><a name="[1af]"></a>HAL_I2CEx_DisableFastModePlus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c_ex.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>HAL_PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_DisableLSCO
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableLSCO
</UL>

<P><STRONG><a name="[16b]"></a>HAL_PWR_DisableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_DisableLSCO
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableLSCO
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>HAL_PWR_EnableWakeUpPin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>HAL_PWR_DisableWakeUpPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableLowPowerRunMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableLowPowerRunMode
</UL>

<P><STRONG><a name="[14f]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP1Mode
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP0Mode
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_PWR_EnterSTANDBYMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>HAL_PWR_EnableSleepOnExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>HAL_PWR_DisableSleepOnExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>HAL_PWR_EnableSEVOnPend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>HAL_PWR_DisableSEVOnPend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>HAL_PWR_PVDCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[d3]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_PWREx_EnableBatteryCharging</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>HAL_PWREx_DisableBatteryCharging</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>HAL_PWREx_EnableVddUSB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>HAL_PWREx_DisableVddUSB</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>HAL_PWREx_EnableVddIO2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>HAL_PWREx_DisableVddIO2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>HAL_PWREx_EnableInternalWakeUpLine</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>HAL_PWREx_DisableInternalWakeUpLine</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>HAL_PWREx_EnableGPIOPullUp</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>HAL_PWREx_DisableGPIOPullUp</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>HAL_PWREx_EnableGPIOPullDown</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>HAL_PWREx_DisableGPIOPullDown</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>HAL_PWREx_EnablePullUpPullDownConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>HAL_PWREx_DisablePullUpPullDownConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>HAL_PWREx_EnableSRAM2ContentRetention</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>HAL_PWREx_DisableSRAM2ContentRetention</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>HAL_PWREx_EnablePVM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>HAL_PWREx_DisablePVM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>HAL_PWREx_EnablePVM2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>HAL_PWREx_DisablePVM2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>HAL_PWREx_EnablePVM3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>HAL_PWREx_DisablePVM3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>HAL_PWREx_EnablePVM4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>HAL_PWREx_DisablePVM4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>HAL_PWREx_ConfigPVM</STRONG> (Thumb, 662 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>HAL_PWREx_EnableLowPowerRunMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PWREx_DisableLowPowerRunMode</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[151]"></a>HAL_PWREx_EnterSTOP0Mode</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[150]"></a>HAL_PWREx_EnterSTOP1Mode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_PWREx_EnterSTOP2Mode</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>HAL_PWREx_EnterSHUTDOWNMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>HAL_PWREx_PVM4Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>HAL_PWREx_PVM3Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>HAL_PWREx_PVM2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>HAL_PWREx_PVM1Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVD_PVM_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_PWREx_PVD_PVM_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32l4xx_hal_pwr_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM1Callback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM2Callback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM3Callback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_PVM4Callback
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[cf]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1568 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[15b]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[15c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[15d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>

<P><STRONG><a name="[d2]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1288 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1da]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 404 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 2132 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[163]"></a>HAL_RCCEx_EnablePLLSAI1</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[164]"></a>HAL_RCCEx_DisablePLLSAI1</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[165]"></a>HAL_RCCEx_EnablePLLSAI2</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[166]"></a>HAL_RCCEx_DisablePLLSAI2</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[1db]"></a>HAL_RCCEx_WakeUpStopCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>HAL_RCCEx_StandbyMSIRangeConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>HAL_RCCEx_EnableLSECSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>HAL_RCCEx_DisableLSECSS</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>HAL_RCCEx_EnableLSECSS_IT</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>HAL_RCCEx_LSECSS_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_LSECSS_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>HAL_RCCEx_LSECSS_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_LSECSS_Callback
</UL>

<P><STRONG><a name="[169]"></a>HAL_RCCEx_EnableLSCO</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisableBkUpAccess
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>

<P><STRONG><a name="[16c]"></a>HAL_RCCEx_DisableLSCO</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisableBkUpAccess
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>HAL_RCCEx_DisableMSIPLLMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_WriteI2CPassword
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_i2c_PresentI2CPassword
</UL>

<P><STRONG><a name="[1e4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b6]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ba]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_ADC
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_ADC
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConversionStartPoll_ADC_GrpRegular
</UL>

<P><STRONG><a name="[bb]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_ADC
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConversionStartPoll_ADC_GrpRegular
</UL>

<P><STRONG><a name="[be]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_ADC
</UL>

<P><STRONG><a name="[ea]"></a>STM32_I2C1_MspInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = STM32_I2C1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_Init
</UL>

<P><STRONG><a name="[eb]"></a>STM32_I2C1_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = STM32_I2C1_Init &rArr; STM32_I2C1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_EnableFastModePlus
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_SelectI2cSpeed
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_Init
</UL>

<P><STRONG><a name="[ef]"></a>STM32_I2C1_MspDeInit</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_DeInit
</UL>

<P><STRONG><a name="[f0]"></a>STM32_I2C1_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_SelectI2cSpeed
</UL>

<P><STRONG><a name="[f3]"></a>NFCTAG_IO_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = NFCTAG_IO_Init &rArr; STM32_I2C1_Init &rArr; STM32_I2C1_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_ConvertStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_LPD_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_I2C1_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC04A1_GPO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST25DV_IO_Init
</UL>

<P><STRONG><a name="[f6]"></a>STM32_I2C1_IsNacked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_IsNacked
</UL>

<P><STRONG><a name="[f8]"></a>STM32_I2C1_IsDeviceReady</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STM32_I2C1_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_IsDeviceReady
</UL>

<P><STRONG><a name="[fb]"></a>STM32_I2C1_MemWrite</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STM32_I2C1_MemWrite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_MemWrite
</UL>

<P><STRONG><a name="[ff]"></a>STM32_I2C1_MemRead</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STM32_I2C1_MemRead &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_MemRead
</UL>

<P><STRONG><a name="[102]"></a>STM32_I2C1_Read</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, x_nucleo_nfc04a1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STM32_I2C1_Read &rArr; HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFCTAG_IO_Read
</UL>

<P><STRONG><a name="[10e]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[10d]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPriorityGrouping
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[113]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32l4xx_hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[119]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[118]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[11a]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[11e]"></a>I2C_TransferConfig</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Abort_IT
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Receive_IT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_IT
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_IT
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_DMA
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_DMA
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[11b]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[11c]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[11f]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive
</UL>

<P><STRONG><a name="[123]"></a>I2C_Disable_IRQ</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Abort_IT
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DisableListen_IT
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Sequential_Receive_IT
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Sequential_Transmit_IT
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
</UL>

<P><STRONG><a name="[122]"></a>I2C_ITListenCplt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ITListenCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[ac]"></a>I2C_DMAAbort</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_DMAAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>I2C_ITSlaveSequentialCplt</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ITSlaveSequentialCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[12a]"></a>I2C_ITAddrCplt</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_ITAddrCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[ab]"></a>I2C_Slave_ISR_IT</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Slave_ISR_IT &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSequentialCplt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>I2C_ITError</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAError
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[12c]"></a>I2C_ITSlaveCplt</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[ae]"></a>I2C_Slave_ISR_DMA</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Slave_ISR_DMA &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>I2C_ITMasterCplt</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_ITMasterCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[ad]"></a>I2C_Master_ISR_DMA</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_Master_ISR_DMA &rArr; I2C_ITMasterCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>I2C_Enable_IRQ</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Enable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Abort_IT
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Sequential_Receive_IT
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Sequential_Transmit_IT
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Receive_IT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Sequential_Transmit_IT
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_IT
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_IT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_DMA
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit_DMA
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_DMA
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_DMA
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_IT
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Transmit_IT
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive_IT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit_IT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
</UL>

<P><STRONG><a name="[135]"></a>I2C_ITMasterSequentialCplt</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ITMasterSequentialCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
</UL>

<P><STRONG><a name="[af]"></a>I2C_Master_ISR_IT</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Master_ISR_IT &rArr; I2C_ITMasterCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSequentialCplt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>I2C_DMAError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_DMAError &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>I2C_DMAMasterTransmitCplt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_DMAMasterTransmitCplt &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>I2C_DMAMasterReceiveCplt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_DMAMasterReceiveCplt &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Enable_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>I2C_DMASlaveTransmitCplt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>I2C_DMASlaveReceiveCplt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_i2c.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_DMA
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write_IT
</UL>

<P><STRONG><a name="[13f]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_DMA
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read_IT
</UL>

<P><STRONG><a name="[158]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[160]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[161]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
